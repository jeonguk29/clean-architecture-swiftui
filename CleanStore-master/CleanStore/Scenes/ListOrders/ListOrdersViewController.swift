//
//  ListOrdersViewController.swift
//  CleanStore
//
//  Created by Raymond Law on 2/12/19.
//  Copyright (c) 2019 Clean Swift LLC. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListOrdersDisplayLogic: AnyObject
{
  func displayFetchedOrders(viewModel: ListOrders.FetchOrders.ViewModel)
}

class ListOrdersViewController: UITableViewController, ListOrdersDisplayLogic
{
  var interactor: ListOrdersBusinessLogic? // ⭐️ 1️⃣ View가 interactor를 가짐 : 이친구한테 일을 시켜야 해서
  var router: (NSObjectProtocol & ListOrdersRoutingLogic & ListOrdersDataPassing)? // 또한 라우터도 가지고 있음 화면 이동을 해야하기 때문에

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  // 필요한 의존성을 넣어주는 것임
  private func setup()
  {
    let viewController = self
    let interactor = ListOrdersInteractor()
    let presenter = ListOrdersPresenter()
    let router = ListOrdersRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  // 라우터를 통해 이동을 함
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewWillAppear(_ animated: Bool)
  {
    super.viewWillAppear(animated)
    fetchOrders()
  }
  
  // MARK: - Fetch orders

  var displayedOrders: [ListOrders.FetchOrders.ViewModel.DisplayedOrder] = []
  
   // 핵심적인 기능들은 interactor한테 시킴 
  func fetchOrders()
  {
    let request = ListOrders.FetchOrders.Request()
    interactor?.fetchOrders(request: request)
  }
  
  func displayFetchedOrders(viewModel: ListOrders.FetchOrders.ViewModel)
  {
    displayedOrders = viewModel.displayedOrders
    tableView.reloadData()
  }
  
  // MARK: - Table view data source
  
  override func numberOfSections(in tableView: UITableView) -> Int
  {
    return 1
  }
  
  override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int
  {
    return displayedOrders.count
  }
  
  override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell
  {
    let displayedOrder = displayedOrders[indexPath.row]
    var cell = tableView.dequeueReusableCell(withIdentifier: "OrderTableViewCell")
    if cell == nil {
      cell = UITableViewCell(style: .value1, reuseIdentifier: "OrderTableViewCell")
    }
    cell?.textLabel?.text = displayedOrder.date
    cell?.detailTextLabel?.text = displayedOrder.total
    return cell!
  }
}
